{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys, os\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import h5py\n",
    "%matplotlib inline\n",
    "\n",
    "sys.path.insert(0, os.environ[\"HOME\"] + '/Programs/ana_cont')\n",
    "from ana_cont import continuation as cont"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "OSError",
     "evalue": "Unable to open file (unable to open file: name = '/home/josef/Downloads/sigma_cont.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-09e6e0197479>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/home/josef/Downloads/sigma_cont.h5'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtail_0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'current_sigma/site_0/tail_0/value'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtail_1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'current_sigma/site_0/tail_1/value'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mniw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mn_orb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, **kwds)\u001b[0m\n\u001b[1;32m    404\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mphil\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    405\u001b[0m                 \u001b[0mfapl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fapl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdriver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlibver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrdcc_nslots\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrdcc_nbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrdcc_w0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 406\u001b[0;31m                 fid = make_fid(name, mode, userblock_size,\n\u001b[0m\u001b[1;32m    407\u001b[0m                                \u001b[0mfapl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfcpl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmake_fcpl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrack_order\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack_order\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    408\u001b[0m                                swmr=swmr)\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    171\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mswmr\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    172\u001b[0m             \u001b[0mflags\u001b[0m \u001b[0;34m|=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_SWMR_READ\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 173\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    174\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r+'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_RDWR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mh5py/h5f.pyx\u001b[0m in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mOSError\u001b[0m: Unable to open file (unable to open file: name = '/home/josef/Downloads/sigma_cont.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
     ]
    }
   ],
   "source": [
    "f = h5py.File('/home/josef/Downloads/sigma_cont.h5','r')\n",
    "tail_0 = f['current_sigma/site_0/tail_0/value'][()]\n",
    "tail_1 = f['current_sigma/site_0/tail_1/value'][()]\n",
    "niw = 20\n",
    "n_orb = 4\n",
    "siw = (f['current_sigma/site_0/values/value'][...,:niw] - tail_0[:,:,None])\n",
    "print(tail_0.real)\n",
    "print(tail_0.imag)\n",
    "for i in range(n_orb):\n",
    "    siw[i,i] /= tail_1[i,i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "beta = 20.\n",
    "wn = np.pi/beta * (2.*np.arange(niw) + 1.)\n",
    "#wgrid = np.linspace(-15., 15., num=1001, endpoint=True)\n",
    "wgrid = 20. * np.tan(np.linspace(-np.pi/2.5, np.pi/2.5, num=1001, endpoint=True))/np.tan(np.pi/2.5)\n",
    "n_orb = 4\n",
    "model_diag = np.exp(-wgrid**2/(2.*8**2))\n",
    "model_diag /= np.trapz(model_diag, wgrid)\n",
    "errfac = 0.005\n",
    "err = 0.002 + errfac * wn**2./wn[-1]**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sol_diag=[]\n",
    "for i in range(n_orb):\n",
    "    probl = cont.AnalyticContinuationProblem(im_axis=wn, re_axis=wgrid, im_data=siw[i,i], kernel_mode='freq_fermionic')\n",
    "    sol_diag.append(\n",
    "        probl.solve(method='maxent_svd', \n",
    "                    model=model_diag, \n",
    "                    stdev=err, \n",
    "                    alpha_determination='classic', \n",
    "                    offdiag=False, preblur=True, blur_width=0.15)[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(n_orb):\n",
    "    plt.plot(wgrid, sol_diag[i].A_opt)\n",
    "plt.show()\n",
    "fig,ax = plt.subplots(ncols=4, nrows=1, figsize=(20,4))\n",
    "for i in range(n_orb):\n",
    "    ax[i].errorbar(wn, siw[i,i].real, yerr=err)\n",
    "    ax[i].plot(wn, sol_diag[i].backtransform.real, ls='--')\n",
    "    ax[i].errorbar(wn, siw[i,i].imag, yerr=err)\n",
    "    ax[i].plot(wn, sol_diag[i].backtransform.imag, ls='-')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sol_offd = []\n",
    "for i in range(n_orb):\n",
    "    sol_offd.append([])\n",
    "    for j in range(i):\n",
    "        s = siw[i,j]\n",
    "        if np.any(np.abs(s)>0.00001) and np.all(np.isfinite(s)):\n",
    "            model = np.sqrt(sol_diag[i].A_opt * sol_diag[j].A_opt)\n",
    "            probl = cont.AnalyticContinuationProblem(im_axis=wn, re_axis=wgrid, im_data=s, kernel_mode='freq_fermionic')\n",
    "            sol_offd[i].append(\n",
    "            probl.solve(method='maxent_svd', \n",
    "                        model=model, \n",
    "                        stdev=err, \n",
    "                        alpha_determination='classic', \n",
    "                        offdiag=True, preblur=True, blur_width=0.15)[0])\n",
    "        else:\n",
    "            sol_offd[i].append(None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(nrows=n_orb, ncols=n_orb, figsize=(20,20))\n",
    "\n",
    "for i in range(n_orb):\n",
    "    ax[i,i].plot(wgrid, sol_diag[i].A_opt)\n",
    "    ax[i,i].set_xlim(-10.,10.)\n",
    "    for j in range(i):\n",
    "        if sol_offd[i][j] is not None:\n",
    "            ax[i,j].plot(wgrid, sol_offd[i][j].A_opt)\n",
    "            ax[i,j].set_xlim(-10.,10.)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(nrows=n_orb, ncols=n_orb, figsize=(20,20))\n",
    "\n",
    "for i in range(n_orb):\n",
    "    ax[i,i].plot(wgrid, sol_diag[i].A_opt)\n",
    "    ax[i,i].set_xlim(-2.,2.)\n",
    "    for j in range(i):\n",
    "        if sol_offd[i][j] is not None:\n",
    "            ax[i,j].plot(wgrid, sol_offd[i][j].A_opt)\n",
    "            ax[i,j].set_xlim(-2.,2.)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(nrows=n_orb, ncols=n_orb, figsize=(20,20))\n",
    "\n",
    "for i in range(n_orb):\n",
    "    ax[i,i].errorbar(wn, siw[i,i].real, yerr=err)\n",
    "    ax[i,i].plot(wn, sol_diag[i].backtransform.real, ls='--')\n",
    "    ax[i,i].errorbar(wn, siw[i,i].imag, yerr=err)\n",
    "    ax[i,i].plot(wn, sol_diag[i].backtransform.imag, ls='-')\n",
    "    for j in range(i):\n",
    "        if sol_offd[i][j] is not None:\n",
    "            ax[i,j].errorbar(wn, siw[i,j].real, yerr=err)\n",
    "            ax[i,j].plot(wn, sol_offd[i][j].backtransform.real, ls='--')\n",
    "            ax[i,j].errorbar(wn, siw[i,j].imag, yerr=err)\n",
    "            ax[i,j].plot(wn, sol_offd[i][j].backtransform.imag, ls='-')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
